from gen_v_booster import *


#list of base forms in the format [type1, type2, index#]


base_form = [[1,11,3],[4,9,9],[7,10,10],[10,6,6],[13,6,3],[16,0,2],[19,0,0],[21,0,2],[23,3,3],[27,4,4],[29,3,3],[32,3,3],[37,9,9],[41,3,2],[43,11,3],[46,6,11],[48,6,3],[50,4,4],[52,0,0],[54,10,10],[56,1,1],[58,9,9],[60,10,10],[63,13,13],[66,1,1],[69,11,3],[72,10,3],[74,5,4],[77,9,9],[79,10,13],[81,12,8],[83,0,2],[84,0,2],[86,10,10],[88,3,3],[90,10,10],[92,7,3],[95,5,4],[96,13,13],[98,10,10],[100,12,12],[102,11,13],[104,4,4],[108,0,0],[109,3,3],[111,4,5],[113,0,0],[114,11,11],[115,0,0],[116,10,10],[118,10,10],[120,10,10],[127,6,6],[128,0,0],[129,10,10],[131,10,14],[132,0,0],[133,0,0],[137,0,0],[138,5,10],[140,5,10],[142,5,2],[147,15,15],[152,11,11],[155,9,9],[158,10,10],[161,0,0],[163,0,2],[165,6,2],[167,6,3],[170,10,12],[172,12,12],[173,0,0],[174,0,0],[175,0,0],[176,0,2],[177,13,2],[179,12,12],[183,10,10],[187,11,2],[188,11,2],[190,0,0],[191,11,11],[193,6,2],[194,10,4],[198,16,2],[200,7,7],[201,13,13],[203,0,13],[204,6,6],[206,0,0],[207,4,2],[209,0,0],[211,10,3],[213,6,5],[214,6,1],[215,16,14],[216,0,0],[218,9,9],[220,14,4],[221,14,4],[222,10,5],[223,10,10],[225,14,2],[227,8,2],[228,16,9],[231,4,4],[234,0,0],[235,0,0],[236,1,1],[238,14,13],[239,12,12],[240,9,9],[241,0,0],[246,5,4],[252,11,11],[255,9,9],[258,10,10],[261,16,16],[263,0,0],[265,6,6],[266,6,6],[270,10,11],[273,11,11],[276,0,2],[278,10,2],[280,13,13],[283,6,10],[285,11,11],[287,0,0],[290,6,4],[293,0,0],[296,1,1],[298,0,0],[299,5,5],[300,0,0],[302,16,7],[303,8,8],[304,8,5],[307,1,13],[309,12,12],[311,12,12],[312,12,12],[313,6,6],[314,6,6],[316,3,3],[318,10,16],[320,10,10],[322,9,4],[324,9,9],[325,13,13],[327,0,0],[328,4,4],[331,11,11],[333,0,2],[335,0,0],[336,3,3],[337,5,13],[338,5,13],[339,10,4],[341,10,10],[343,4,13],[345,5,11],[347,5,6],[349,10,10],[351,0,0],[352,0,0],[353,7,7],[355,7,7],[357,11,2],[359,16,16],[360,13,13],[361,14,14],[363,14,10],[366,10,10],[369,10,5],[370,10,10],[371,15,15],[374,8,13],[387,11,11],[390,9,9],[393,10,10],[396,0,2],[399,0,0],[401,6,6],[403,12,12],[404,12,12],[406,11,3],[408,5,5],[410,5,8],[412,6,6],[415,6,2],[417,12,12],[418,10,10],[420,11,11],[422,10,10],[425,7,2],[427,0,0],[431,0,0],[433,13,13],[434,3,16],[436,8,13],[438,5,5],[439,13,13],[440,0,0],[441,0,2],[442,7,16],[443,15,4],[446,0,0],[447,1,1],[449,4,4],[451,3,6],[453,3,1],[455,11,11],[456,10,10],[458,10,2],[459,11,14],[479,12,7],[495,11,11],[498,9,9],[501,10,10],[504,0,0],[506,0,0],[509,16,16],[511,11,11],[513,9,9],[515,10,10],[517,13,13],[519,0,2],[522,12,12],[524,5,5],[527,13,2],[529,4,4],[531,0,0],[532,1,1],[535,10,10],[538,1,1],[539,1,1],[540,6,11],[543,6,3],[546,11,11],[548,11,11],[550,10,10],[551,4,16],[554,9,9],[556,11,11],[557,6,5],[559,16,1],[561,13,2],[562,7,7],[564,10,5],[566,5,2],[568,3,3],[570,16,16],[572,0,0],[574,13,13],[577,13,13],[580,10,2],[582,14,14],[585,0,11],[587,12,2],[588,6,6],[590,11,3],[592,10,7],[595,6,12],[597,11,8],[599,8,8],[602,12,12],[605,13,13],[607,7,9],[610,15,15],[611,15,15],[613,14,14],[615,14,14],[616,6,6],[617,6,6],[618,4,12],[619,1,1],[622,4,7],[624,16,8],[627,0,2],[629,16,2],[633,16,15],[636,6,9]]


#at index i, [type1, type2]

type_index = [[0,0],[11,3],[11,3],[11,3],[9,9],[9,9],[9,2],[10,10],[10,10],[10,10],[6,6],[6,6],[6,2],[6,3],[6,3],[6,3],[0,2],[0,2],[0,2],[0,0],[0,0],[0,2],[0,2],[3,3],[3,3],[12,12],[12,12],[4,4],[4,4],[3,3],[3,3],[3,4],[3,3],[3,3],[3,4],[0,0],[0,0],[9,9],[9,9],[0,0],[0,0],[3,2],[3,2],[11,3],[11,3],[11,3],[6,11],[6,11],[6,3],[6,3],[4,4],[4,4],[0,0],[0,0],[10,10],[10,10],[1,1],[1,1],[9,9],[9,9],[10,10],[10,10],[10,1],[13,13],[13,13],[13,13],[1,1],[1,1],[1,1],[11,3],[11,3],[11,3],[10,3],[10,3],[5,4],[5,4],[5,4],[9,9],[9,9],[10,13],[10,13],[12,8],[12,8],[0,2],[0,2],[0,2],[10,10],[10,14],[3,3],[3,3],[10,10],[10,14],[7,3],[7,3],[7,3],[5,4],[13,13],[13,13],[10,10],[10,10],[12,12],[12,12],[11,13],[11,13],[4,4],[4,4],[1,1],[1,1],[0,0],[3,3],[3,3],[4,5],[4,5],[0,0],[11,11],[0,0],[10,10],[10,10],[10,10],[10,10],[10,10],[10,13],[13,13],[6,2],[14,13],[12,12],[9,9],[6,6],[0,0],[10,10],[10,2],[10,14],[0,0],[0,0],[10,10],[12,12],[9,9],[0,0],[5,10],[5,10],[5,10],[5,10],[5,2],[0,0],[14,2],[12,2],[9,2],[15,15],[15,15],[15,2],[13,13],[13,13],[11,11],[11,11],[11,11],[9,9],[9,9],[9,9],[10,10],[10,10],[10,10],[0,0],[0,0],[0,2],[0,2],[6,2],[6,2],[6,3],[6,3],[3,2],[10,12],[10,12],[12,12],[0,0],[0,0],[0,0],[0,2],[13,2],[13,2],[12,12],[12,12],[12,12],[11,11],[10,10],[10,10],[5,5],[10,10],[11,2],[11,2],[11,2],[0,0],[11,11],[11,11],[6,2],[10,4],[10,4],[13,13],[16,16],[16,2],[10,13],[7,7],[13,13],[13,13],[0,13],[6,6],[6,8],[0,0],[4,2],[8,4],[0,0],[0,0],[10,3],[6,8],[6,5],[6,1],[16,14],[0,0],[0,0],[9,9],[9,5],[14,4],[14,4],[10,5],[10,10],[10,10],[14,2],[10,2],[8,2],[16,9],[16,9],[10,15],[4,4],[4,4],[0,0],[0,0],[0,0],[1,1],[1,1],[14,13],[12,12],[9,9],[0,0],[0,0],[12,12],[9,9],[10,10],[5,4],[5,4],[5,16],[13,2],[9,2],[13,11],[11,11],[11,11],[11,11],[9,9],[9,1],[9,1],[10,10],[10,4],[10,4],[16,16],[16,16],[0,0],[0,0],[6,6],[6,6],[6,2],[6,6],[6,3],[10,11],[10,11],[10,11],[11,11],[11,16],[11,16],[0,2],[0,2],[10,2],[10,2],[13,13],[13,13],[13,13],[6,10],[6,2],[11,11],[11,1],[0,0],[0,0],[0,0],[6,4],[6,2],[6,7],[0,0],[0,0],[0,0],[1,1],[1,1],[0,0],[5,5],[0,0],[0,0],[16,7],[8,8],[8,5],[8,5],[8,5],[1,13],[1,13],[12,12],[12,12],[12,12],[12,12],[6,6],[6,6],[11,3],[3,3],[3,3],[10,16],[10,16],[10,10],[10,10],[9,4],[9,4],[9,9],[13,13],[13,13],[0,0],[4,4],[4,15],[4,15],[11,11],[11,16],[0,2],[15,2],[0,0],[3,3],[5,13],[5,13],[10,4],[10,4],[10,10],[10,16],[4,13],[4,13],[5,11],[5,11],[5,6],[5,6],[10,10],[10,10],[0,0],[0,0],[7,7],[7,7],[7,7],[7,7],[11,2],[13,13],[16,16],[13,13],[14,14],[14,14],[14,10],[14,10],[14,10],[10,10],[10,10],[10,10],[10,5],[10,10],[15,15],[15,15],[15,2],[8,13],[8,13],[8,13],[5,5],[14,14],[8,8],[15,13],[15,13],[10,10],[4,4],[15,2],[8,13],[13,13],[11,11],[11,11],[11,4],[9,9],[9,1],[9,1],[10,10],[10,10],[10,8],[0,2],[0,2],[0,2],[0,0],[0,10],[6,6],[6,6],[12,12],[12,12],[12,12],[11,3],[11,3],[5,5],[5,5],[5,8],[5,8],[6,6],[6,11],[6,2],[6,2],[6,2],[12,12],[10,10],[10,10],[11,11],[11,11],[10,10],[10,4],[0,0],[7,2],[7,2],[0,0],[0,0],[7,7],[16,2],[0,0],[0,0],[13,13],[3,16],[3,16],[8,13],[8,13],[5,5],[13,13],[0,0],[0,2],[7,16],[15,4],[15,4],[15,4],[0,0],[1,1],[1,8],[4,4],[4,4],[3,6],[3,16],[3,1],[3,1],[11,11],[10,10],[10,10],[10,2],[11,14],[11,14],[16,14],[12,8],[0,0],[4,5],[11,11],[12,12],[9,9],[0,2],[6,2],[11,11],[14,14],[4,2],[14,4],[0,0],[13,1],[5,8],[7,7],[14,7],[12,7],[13,13],[13,13],[13,13],[8,15],[10,15],[9,8],[0,0],[7,15],[13,13],[10,10],[10,10],[16,16],[11,11],[0,0],[13,9],[11,11],[11,11],[11,11],[9,9],[9,1],[9,1],[10,10],[10,10],[10,10],[0,0],[0,0],[0,0],[0,0],[0,0],[16,16],[16,16],[11,11],[11,11],[9,9],[9,9],[10,10],[10,10],[13,13],[13,13],[0,2],[0,2],[0,2],[12,12],[12,12],[5,5],[5,5],[5,5],[13,2],[13,2],[4,4],[4,8],[0,0],[1,1],[1,1],[1,1],[10,10],[10,4],[10,4],[1,1],[1,1],[6,11],[6,11],[6,11],[6,3],[6,3],[6,3],[11,11],[11,11],[11,11],[11,11],[10,10],[4,16],[4,16],[4,16],[9,9],[9,9],[11,11],[6,5],[6,5],[16,1],[16,1],[13,2],[7,7],[7,7],[10,5],[10,5],[5,2],[5,2],[3,3],[3,3],[16,16],[16,16],[0,0],[0,0],[13,13],[13,13],[13,13],[13,13],[13,13],[13,13],[10,2],[10,2],[14,14],[14,14],[14,14],[0,11],[0,11],[12,2],[6,6],[6,8],[11,3],[11,3],[10,7],[10,7],[10,10],[6,12],[6,12],[11,8],[11,8],[8,8],[8,8],[8,8],[12,12],[12,12],[12,12],[13,13],[13,13],[7,9],[7,9],[7,9],[15,15],[15,15],[15,15],[14,14],[14,14],[14,14],[6,6],[6,6],[4,12],[1,1],[1,1],[15,15],[4,7],[4,7],[16,8],[16,8],[0,0],[0,2],[0,2],[16,2],[16,2],[9,9],[6,8],[16,15],[16,15],[16,15],[6,9],[6,9],[8,1],[5,1],[11,1],[2,2],[12,2],[15,9],[15,12],[4,2],[15,14],[10,1],[0,13],[6,8]]


trainer_offset = [0, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 18, 18, 18, 18, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 18, 8, 16, 18, 18, 18, 18, 8, 8, 8, 8, 8, 8, 18, 18, 18, 16, 16, 18, 18, 18, 8, 8, 8, 8, 8, 16, 16, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 8, 8, 8, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 8, 8, 16, 8, 8, 8, 8, 8, 16, 16, 8, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 10, 8, 8, 8, 8, 8, 18, 8, 8, 18, 18, 8, 16, 16, 8, 8, 8, 8, 8, 8, 8, 8, 18, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 10, 10, 10, 8, 18, 18, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 18, 18, 18, 16, 16, 16, 8, 8, 8, 16, 18, 18, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 18, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 8, 8, 8, 8, 8, 10, 8, 18, 16, 16, 8, 8, 8, 10, 10, 10, 18, 18, 8, 16, 16, 16, 16, 16, 16, 16, 8, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8, 16, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 18, 18, 18, 16, 16, 16, 8, 8, 8, 18, 18, 18, 18, 18, 18, 8, 16, 10, 10, 10, 8, 8, 16, 16, 16, 18, 18, 18, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 18, 18, 18, 18, 18, 18, 8, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10, 10, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 18]

party_count = [0, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 4, 3, 3, 3, 4, 3, 4, 5, 5, 5, 5, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3, 3, 3, 4, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 6, 6, 4, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 6, 4, 3, 3, 3, 6, 4, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 3, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 6, 3, 3, 6, 6, 3, 4, 4, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 4, 3, 4, 4, 4, 3, 3, 3, 4, 6, 6, 6, 5, 5, 5, 5, 6, 6, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 4, 3, 4, 3, 4, 4, 4, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 6, 4, 5, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 4, 3, 3, 5, 5, 4, 4, 6, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 3, 6, 4, 4, 3, 3, 3, 3, 3, 3, 6, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 3, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 5, 5, 5, 4, 4, 4, 3, 3, 3, 6, 6, 6, 6, 6, 6, 3, 4, 4, 4, 4, 3, 3, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 4, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 3, 4, 6]

#deprecated
#double_double_set = {4,342,347,356,360,361,362,363,364,365,368,369,370,371,374,375,376,377,494,495,496,513,514,519,520,521,522,588,589,590,602,603,614,615,632,643,644,701,702,703,704,705,727,728,732,733,786,787,788,789,790,791,792,793,794,795,796,797,798,799,807,809}

#takes in bytearray, saves bytes to file
def save_binary_file(data, file_name, path):
	
	output_path = asksaveasfilename(initialdir = path,  defaultextension = "", initialfile = file_name)
	
	output_binary = bytes(data)
	
	with open(output_path, 'wb') as f:
		f.write(output_binary)

def expand(trpoke):
	
	trainer_number = 1
	trainer_party = 1
	max_trainer_index = 813

	last_index = 0
	pointer_poke = 6572 #first at 0x19AC = 6572
		
	pokemon_count = 0
	last_skip = 0
	
	type_arr = []

	
	#pull all the levels, check that they are good:
	while True:
		
		skip_number = trainer_offset[trainer_number]
		
		#pointer_poke + 2 is low, pointer_poke + 3 is high
		
		#check if the current Pokemon is blank
		if(trpoke[pointer_poke + 4] == 0 and trpoke[pointer_poke + 5] == 0):
			#copy the difficulty
			trpoke[pointer_poke] = trpoke[pointer_poke - last_skip] 
			
			#copy the gender/ability
			trpoke[pointer_poke + 1] = trpoke[pointer_poke + 1 - last_skip] 
			
			#copy the level
			lvl = min(max(trpoke[pointer_poke + 2 - last_skip] + random.randint(0,1), 1),100)
			
			if(lvl >= 100 or lvl == 0):
				print("problem at", pointer_poke)
			
			trpoke[pointer_poke + 2] = lvl
			
			
			#get the previous Pokemon index #
			last_index = trpoke[pointer_poke + 4 - last_skip]
			last_index += 256*trpoke[pointer_poke + 5 - last_skip]
			
			#check if there is a common type to l previous Pokemon:
			theme_bool = True
			common_type = []
			for i in type_arr:
				#for type and type 2
				for type in i:
					#check if type is a common type
					#If the list of common types is empty
					if(len(common_type) == 0):
						check_bool = True
					#or if it isn't but type isn't in the list of common types
					elif(not(type in common_type)):
						check_bool = True
					#type is already confirmed to be in common
					else:
						check_bool = False
					
					#run check to see if current type is shared by all Pokemon in the party
					if(check_bool):
						for j in type_arr:
							if(not(type == j[0] or type == j[1])):
								theme_bool = False
					#if we found type to be in common, add it to the common types
					if(theme_bool):
						common_type.append(type)
					#otherwise reset theme_bool
					else:
						theme_bool = True
						
					
			output_index = 0
			
			#if common is not empty, choose a Pokemon that shares the common type(s).
			if(len(common_type) != 0):
				while True:
					#pick a random Pokemon
					temp = random.randint(1, len(base_form) - 1)
					
					choice = base_form[temp][0]
					
					#check if it has any of the common types, and if so, output that and break the loop
					for type in common_type:
						if(type == type_index[choice][0] or type == type_index[choice][1]):
							output_index = choice
							break
					if(output_index != 0):
						break
							
							
			#no type theme
			#Choose a Pokemon that shares no type with the current team (always possible since 5 Pokemon have at most 10 types between them)
			else:
				while True:
					#pick a random Pokemon base form
					temp = random.randint(1, len(base_form) - 1)
					
					choice = base_form[temp][0]
					
					#check if it has no type in common with previous Pokemon, and if so, output that and break the loop
					for type in type_arr:
						if(type != type_index[choice][0] and type != type_index[choice][1]):
							output_index = choice
							break
					if(output_index != 0):
						break
			
			print("trainer", trainer_number, 'as party member number', trainer_party, "added", output_index, 'difficulty', trpoke[pointer_poke], 'gender', trpoke[pointer_poke + 1], 'level', trpoke[pointer_poke + 2])
			
			
			
			#write new index number
			trpoke[pointer_poke + 4] = output_index%256
			
			trpoke[pointer_poke + 5] = int((output_index - output_index%256)/256)
			
			
			#item or move 1
			if(skip_number > 8):
				trpoke[pointer_poke + 8] = trpoke[pointer_poke + 8 - last_skip]
				trpoke[pointer_poke + 9] = trpoke[pointer_poke + 9 - last_skip]
			
			#move 1/2
			if(skip_number > 10):
				trpoke[pointer_poke + 10] = trpoke[pointer_poke + 10 - last_skip]
				trpoke[pointer_poke + 11] = trpoke[pointer_poke + 11 - last_skip]
			
			#move 2/3
			if(skip_number > 10):
				trpoke[pointer_poke + 12] = trpoke[pointer_poke + 12 - last_skip]
				trpoke[pointer_poke + 13] = trpoke[pointer_poke + 13 - last_skip]
			
			#move 3/4
			if(skip_number > 10):
				trpoke[pointer_poke + 14] = trpoke[pointer_poke + 14 - last_skip]
				trpoke[pointer_poke + 15] = trpoke[pointer_poke + 15 - last_skip]
			
			#move 4
			if(skip_number > 14):
				trpoke[pointer_poke + 16] = trpoke[pointer_poke + 16 - last_skip]
				trpoke[pointer_poke + 17] = trpoke[pointer_poke + 17 - last_skip]
			
		#otherwise, grab the type of the current Pokemon
		else:
			type_arr.append([type_index[last_index][0],type_index[last_index][1]])
		
		
		#if this is the last Pokemon, break
		if(trainer_number == max_trainer_index and trainer_party == party_count[trainer_number]):
			break
		else:
			#move to the next pokemon
			last_skip = trainer_offset[trainer_number]
			pointer_poke += last_skip
			
			#if we just did the last Pokemon for the current trainer, move to the next one
			if(trainer_party == party_count[trainer_number]):
				trainer_party = 1
				trainer_number += 1
				#clear the type array
				type_arr = []
			#otherwise, move to the next party member
			else:
				trainer_party += 1
				
		#some checks for the wierd offset skips:
			
		#difficulty is 2 ahead, looking at two blanks or FF before. In other words, every offset is +2 from where it should be (e.g. pointer_poke is really (pointer_poke - 2)
		if((trpoke[pointer_poke] == 0 and trpoke[pointer_poke + 1] == 0) or (trpoke[pointer_poke] == 255 and trpoke[pointer_poke + 1] == 255)):
			#in this case, +2 can be anything, +3 can be {0,1,2}{0,1,2}, +4 is level, +5 is blank, +4 is [0,255], +5 is [0,2], +6 & +7 are 0
			if(trpoke[pointer_poke + 4] <= 100 and trpoke[pointer_poke + 5] == 0 and trpoke[pointer_poke + 7] <= 2 and trpoke[pointer_poke + 8] == 0 and trpoke[pointer_poke + 9] == 0):
				#make sure not just all zeroes
				if(trpoke[pointer_poke + 7] > 0 or trpoke[pointer_poke + 6] > 0):
					#increment pointer by 2
					pointer_poke += 2
	
	return(trpoke)


#only need to run this once, to get the array of part-counts
#leaving here for possible future dynamic integration
def temp_function(trdata):

	trainer_array = []
	
	
	pointer_data = 0
	trainer_number = 1
	#current integer byte-offset for TRdata
	#TRdata, start from 0x19B4 = 6580
	pointer_data = 6580
	max_trainer_index = 813
	
	party_count = [0]
	
	#parse trdata
	while True:
		#get # of Pokemon, which is the 3rd hex pair on
		number_pokemon = trdata[pointer_data + 3] & 7
		
		party_count.append(number_pokemon)
		
		if(trainer_number == max_trainer_index):
			break
		else:
			trainer_number += 1
			pointer_data += 20
	
	print(party_count)
	return(True)
	
def main():
	
	gen_number = 5.1
	
	#get the files using the TLB
	
	trpoke, output_path = get_files_gen_v(5.99)
	
	trpoke = expand(trpoke)

	save_binary_file(trpoke, '2.narc', output_path)

main()
